/*
 The table below describes the required computations and their dependencies

 No. | Dependency | Computation method | Result
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 1.  |            | given              | sk = de19d53f28d4cdee74bad062342d8486a90a652055f3de4b2efa5eb2fccc9d53
 2.  |            | given              | timestamp = 1559156452968
 3.  |            | lastNonce          | nonce = 9223372036854775807
 4.  | 1,         | secp256k1          | pk = 0470256c078e105d2958b9cf66f2161d83368f483c0219790277fb726a459be7f56a9a48bbecf72bcaed6a3515bd0a144faf6a6a8de8f6c9b3b7dff297eb371f28
 5.  | 4, 2,      | genIds             | uname = Unforgeable(0x10d4824180800daef356857cffca4f51471960b92711df0fd3c3425401149e11)
 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0x10d4824180800daef356857cffca4f51471960b92711df0fd3c3425401149e11) })
 7.  | 6,         | protobuf           | toSign = 2a40aa013d0a0d2a0b10feffffffffffffffff010a2c5a2a0a263a240a220a2010d4824180800daef356857cffca4f51471960b92711df0fd3c3425401149e111001
 8.  | 7, 1,      | secp256k1          | sig = 304402202fa3b242149821b91b35b058faa3943efdd5ce938cb8c6873a4cb5b2694ed53202200a7a443b29411e659806b1c8e1583eec1e0404b218d43f45fef6a3c418326649
 9.  | 4,         | registry           | uri = rho:id:asysrwfgzf8bf7sxkiowp4b3tcsy4f8ombi3w96ysox4u3qdmn1wbc
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 */
new 
  MakeMint, rs(`rho:registry:insertSigned:secp256k1`), uriOut,
  rl(`rho:registry:lookup`), NonNegativeNumberCh
in {
  rl!(`rho:lang:nonNegativeNumber`, *NonNegativeNumberCh) |
  for(@(_, NonNegativeNumber) <- NonNegativeNumberCh) {
    contract MakeMint(return) = {
      new thisMint, internalMakePurse, decr in {
        contract thisMint(@"makePurse", @init, return) = {
          new balanceCh in {
            @NonNegativeNumber!(init, *balanceCh) | for(@balance <- balanceCh) {
              internalMakePurse!(balance, *return)
            }
          }
        } |
        contract internalMakePurse(balance, return) = {
          //balance must be a name that NonNegativeNumber contract is listening on
          new thisPurse, logStore in {
            logStore!(Nil) |
            new letCh in { // let thisDecr = ...
              letCh!(bundle0{bundle0{*thisPurse}|*decr}) |
              for (thisDecr <- letCh) {
                contract thisPurse(@=*thisDecr, @amount, return) = {
                  new success in {
                    balance!("sub", amount, *success) | 
                    for (@subOk <- success) {
                      return!(subOk, *decr) |

                      for (logCh <<- logStore) {
                        if (Nil != *logCh) { 
                          new bd(`rho:block:data`), bdCh in {
                            bd!(*bdCh) |
                            for (@timestamp, @blockNumber, @sender <- bdCh) {
                              logCh!(["*decr", amount, subOk, blockNumber, timestamp, sender]) 
                            }
                          }
                        }
                      }

                    }
                  }
                }
              }
            } |
            // Set to Nil to disable logging
            contract thisPurse(@"setLog", logCh, ack) = {
              for (_ <- logStore) { logStore!(*logCh) | ack!(Nil) }
            } |
            contract thisPurse(@"getBalance", return) = { balance!("value", *return) } |
            contract thisPurse(@"sprout", return) = { thisMint!("makePurse", 0, *return) } |
            contract thisPurse(@"split", @amount, return) = {
              new destPurseCh, successCh in {
                thisPurse!("sprout", *destPurseCh) | for(@destPurse <- destPurseCh) {
                  @destPurse!("deposit", amount, *thisPurse, *successCh) |
                  for(@success <- successCh) {
                    if (success) {
                      return!([destPurse])
                    } else {
                      return!([])
                    }
                  }
                }
              }
            } |
            contract thisPurse(@"deposit", @amount, @src, success) = {
              new result in {
                @src!(bundle0{bundle0{src}|*decr}, amount, *result) | //call src decr function.
                for(@decrSuccess, @auth <- result) {
                  for (logCh <<- logStore) {
                    if (decrSuccess and auth == *decr) {
                      // add transferred amount to this purse
                      balance!("add", amount, *success) |
                      
                      // log
                      if (Nil != *logCh) {
                        new bd(`rho:block:data`), bdCh in {
                          bd!(*bdCh) |
                          for (@timestamp, @blockNumber, @sender <- bdCh) {
                            logCh!(["deposit", amount, src.toByteArray(), true, blockNumber, timestamp, sender])
                          }
                        }
                      }
                    } else {
                      success!(false) |
                      
                      // log
                      if (Nil != *logCh) {
                        new bd(`rho:block:data`), bdCh in {
                          bd!(*bdCh) |
                          for (@timestamp, @blockNumber, @sender <- bdCh) {
                            logCh!(["deposit", amount, src.toByteArray(), false, blockNumber, timestamp, sender])
                          }
                        }
                      }
                    }
                  }
                }
              }
            } |
            return!(bundle+{*thisPurse})
          }
        } |
        return!(bundle+{*thisMint})
      }
    }
  } |
  rs!(
    "0470256c078e105d2958b9cf66f2161d83368f483c0219790277fb726a459be7f56a9a48bbecf72bcaed6a3515bd0a144faf6a6a8de8f6c9b3b7dff297eb371f28".hexToBytes(),
    (9223372036854775807, bundle+{*MakeMint}),
    "304402202fa3b242149821b91b35b058faa3943efdd5ce938cb8c6873a4cb5b2694ed53202200a7a443b29411e659806b1c8e1583eec1e0404b218d43f45fef6a3c418326649".hexToBytes(),
    *uriOut
  )
}
  
  
